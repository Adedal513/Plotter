import pandas as pd
import tempfile
import matplotlib.pyplot as plt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from bot.plotting import plot_histogram

# –°—Ç–µ–π—Ç—ã ConversationHandler
ASK_COLUMN = 1

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV-—Ñ–∞–π–ª–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ .csv ‚Äî –∏ —è –ø–æ–∫–∞–∂—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂—É –¥–µ–π—Å—Ç–≤–∏—è."
    )
    await update.message.reply_text(msg)

async def handle_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document.file_name.endswith(".csv"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.csv`.")
        return

    with tempfile.NamedTemporaryFile(suffix=".csv", delete=False) as tmp:
        path = tmp.name
        file = await context.bot.get_file(document.file_id)
        await file.download_to_drive(path)

    try:
        df = pd.read_csv(path)
        context.user_data["df"] = df

        info = "**üßæ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã:**\n\n"
        for col in df.columns:
            info += f"- `{col.strip()}`: `{df[col].dtype}`\n"

        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É", callback_data="histogram")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(info, parse_mode="Markdown")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏:", reply_markup=reply_markup)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞"
async def option_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "histogram":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã:")
        return ASK_COLUMN


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
async def column_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    column = update.message.text.strip()
    df = context.user_data.get("df")

    if df is None or column not in df.columns:
        await update.message.reply_text("–¢–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ASK_COLUMN

    try:
        # –ü–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp_img:
            plot_histogram(df, column, tmp_img.name)
            await update.message.reply_photo(photo=open(tmp_img.name, "rb"), caption=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É `{column}`", parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    return ConversationHandler.END
