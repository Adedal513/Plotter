import matplotlib.pyplot as plt
import pandas as pd

def plot_histogram(df: pd.DataFrame, column: str, output_path: str):
    plt.figure(figsize=(8, 6))
    data = df[column].dropna()

    if pd.api.types.is_numeric_dtype(data):
        plt.hist(data, bins=20, color="skyblue", edgecolor="black")
        plt.title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π: {column}")
    else:
        counts = data.value_counts().head(20)  # –¢–æ–ª—å–∫–æ —Ç–æ–ø 20 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        counts.plot(kind="bar", color="orange", edgecolor="black")
        plt.title(f"–ß–∞—Å—Ç–æ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {column}")
        plt.xticks(rotation=45, ha='right')

    plt.xlabel(column)
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()

def get_categorical_stats(series: pd.Series) -> str:
    series = series.dropna()
    freq = series.value_counts()
    desc = {
        "üîº –í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ:": freq.idxmax(),
        "üîΩ –í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω–µ–µ —á–∞—Å—Ç–æ:": freq.idxmin()
    }
    stats_text = "**üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
    for label, val in desc.items():
        stats_text += f"{label}: `{val}`\n"
    return stats_text

def get_numeric_stats(series: pd.Series) -> str:
    series = series.dropna()
    desc = {
        "üîΩ –ú–∏–Ω.": series.min(),
        "üîº –ú–∞–∫—Å.": series.max(),
        "üìâ –°—Ä–µ–¥–Ω–µ–µ": series.mean(),
        "üìä –ú–µ–¥–∏–∞–Ω–∞": series.median(),
        "üîü –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å 10%": series.quantile(0.1),
        "‚è´ –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å 90%": series.quantile(0.9),
    }
    stats_text = "**üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
    for label, val in desc.items():
        stats_text += f"{label}: `{val:.4g}`\n"
    return stats_text


def interpret_stats(series: pd.Series) -> str:
    series = series.dropna()
    if len(series) < 10:
        return "_üìå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏._"

    mean = series.mean()
    median = series.median()
    std = series.std()
    p10 = series.quantile(0.10)
    p70 = series.quantile(0.70)
    p90 = series.quantile(0.90)

    notes = []

    if abs(mean - median) > 0.3 * std:
        notes.append("‚ö†Ô∏è –ú–µ–¥–∏–∞–Ω–∞ –∑–∞–º–µ—Ç–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –∞—Å–∏–º–º–µ—Ç—Ä–∏—è –∏–ª–∏ –≤—ã–±—Ä–æ—Å—ã.")

    if (p90 - mean) > (mean - p70):
        notes.append("‚ÜóÔ∏è –í–µ—Ä—Ö–Ω–∏–π —Ö–≤–æ—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ –Ω–∏–∂–Ω–µ–≥–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∞—Å–∏–º–º–µ—Ç—Ä–∏—è.")

    if (median - p10) < 0.1 * std:
        notes.append("üìâ –ù–∏–∂–Ω–∏–π —Ö–≤–æ—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã—à–µ –º–µ–¥–∏–∞–Ω—ã.")

    if not notes:
        return "_‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º._"

    return "\n".join(notes)
